{"version":3,"sources":["webpack://regex/./src/utils/DOMUtils.js","webpack://regex/./src/utils/MatchPattern.js","webpack://regex/./src/Expression.js","webpack://regex/./src/app.js","webpack://regex/./src/TestText.js"],"names":["DOMUtils","$","create","type","className","content","parent","element","document","createElement","HTMLElement","appendChild","innerHTML","copy","target","source","n","createCM","opts","width","height","o","lineNumbers","tabSize","indentWithTabs","specialChars","specialCharPlaceholder","ch","CodeMirror","decomposeRegEx","str","delim","match","RegExp","exec","flags","query","body","_childQuery","querySelector","el","f","id","result","parentNode","MatchPattern","this","_expression","newExp","_textcm","newTextCm","_result","newTResult","regex","_getRegex","console","log","_match","textcm","resultDiv","array","date1","date2","seconds","currentLine","counter","currentLineIndex","Date","getValue","pos","posFromIndex","index","line","len","length","markText","Math","abs","expression","e","Expression","text","matchPattern","initUI","DEFAULT_EXPRESSION","pattern","editor","lastIndexOf","replaceRange","deferUpdate","editorEl","getElementById","autofocus","maxLength","singleLine","on","cm","evt","onEditorMouseDown","onEditorChange","onEditorKeyDown","toggleOverwrite","setInitialExpression","setSize","value","expmon","ctrlKey","metaKey","keyCode","preventDefault","from","to","removed","origin","rect","charCoords","x","left","y","top","right","bottom","myRe","setValue","getDoc","readOnly","atomic","inclusiveLeft","inclusiveRight","init","newexpmon","_expmon","fromTextArea","styleSelectedText","onTextEditorChange"],"mappings":"yBAAA,IAAIA,EAAW,GAAIC,EAAID,EACvB,UAEAC,EAAEC,OAAS,SAASC,EAAMC,EAAWC,EAASC,GAC7C,IAAIC,EAAUC,SAASC,cAAcN,GAAQ,OAO7C,OANIC,IAAaG,EAAQH,UAAYA,GACjCC,IACCA,aAAmBK,YAAeH,EAAQI,YAAYN,GACnDE,EAAQK,UAAYP,GAExBC,GAAUA,EAAOK,YAAYJ,GAC1BA,GAGRN,EAAEY,KAAO,SAASC,EAAQC,GACzB,IAAK,IAAIC,KAAKD,EAAUD,EAAOE,GAAKD,EAAOC,GAC3C,OAAOF,GAGRb,EAAEgB,SAAW,SAASH,EAAQI,EAAO,GAAIC,EAAQ,OAAQC,EAAS,QAC9D,IAAIC,EAAIpB,EAAEY,KAAK,CACXS,aAAa,EACbC,QAAS,EACTC,gBAAgB,EAChBC,aAAc,2EACdC,uBAAyBC,GAAO1B,EAAEC,OAAO,OAAe,MAAPyB,EAAa,WAAa,aAAc,MAC1FT,GAGH,OADSU,WAAWd,EAAQO,IAIhCpB,EAAE4B,eAAiB,SAASC,EAAKC,EAAM,KACtC,IACIC,EADK,IAAIC,OAAO,IAAIF,EAAM,OAAOA,EAAM,kBAC5BG,KAAKJ,GACpB,OAAIE,EACI,CAACjB,OAAQiB,EAAM,GAAIG,MAAOH,EAAM,IAEhC,CAACjB,OAAQe,EAAKK,MAAO,MAI9BlC,EAAEmC,MAAQ,SAASA,EAAO7B,EAAUC,SAAS6B,MAC5C,MAAqB,MAAbD,EAAM,GAAcnC,EAAEqC,YAAYF,EAAO7B,EAASN,EAAEmC,OAAS7B,EAAQgC,cAAcH,IAG5FnC,EAAEqC,YAAc,SAASF,EAAOI,EAAIC,GAC9BD,EAAGE,KAAMF,EAAGE,GAAK,aACtB,IAAIC,EAASF,EAAE,IAAID,EAAGE,GAAG,IAAIN,EAAOI,EAAGI,YAEvC,MADc,cAAVJ,EAAGE,KAAsBF,EAAGE,GAAK,IAC9BC,GClDO,MAAME,EAEjB,iBAAmB,OAAOC,KAAKC,YAC/B,eAAeC,GACXF,KAAKC,YAAcC,EAGvB,aAAe,OAAOF,KAAKG,QAC3B,WAAWC,GACPJ,KAAKG,QAAUC,EAGnB,aAAe,OAAOJ,KAAKK,QAC3B,WAAWC,GACPN,KAAKK,QAAUC,EAGnB,YACI,IAAIC,EAAQP,KAAKQ,UAAUR,KAAKC,aAC5BM,IACAE,QAAQC,IAAI,uBACZV,KAAKW,OAAOJ,EAAOP,KAAKG,QAASH,KAAKK,UAI9C,OAAOE,EAAOK,EAAQC,GAClB,IAAIC,EAAoBC,EAAOC,EAAOC,EAA+BC,EAA1DC,EAAU,EAA0BC,EAAmB,EAElE,IADAL,EAAQ,IAAIM,KACuC,QAA3CP,EAAQP,EAAMnB,KAAKwB,EAAOU,cAAuB,CACrD,IAAIC,EAAMX,EAAOY,aAAaV,EAAMW,OACpCP,EAAcK,EAAIG,KAClBN,EAAmBG,EAAI1C,GACvB,IAAI8C,EAAMP,EAAmBN,EAAM,GAAGc,OAMtC,GALAhB,EAAOiB,SAAS,CAAEH,KAAMH,EAAIG,KAAM7C,GAAIuC,GAAoB,CAAEM,KAAMH,EAAIG,KAAM7C,GAAI8C,GAAO,CAAErE,UAAW,sBAEpG6D,IACAH,EAAQ,IAAIK,KACZJ,EAAUa,KAAKC,IAAIhB,EAAQC,GAAS,IAChCC,EAAU,EACV,MAKJJ,EAAU/C,UADVmD,EAAU,EACY,SAAWE,EAAU,cAAgBF,EAAU,kCAE/C,SAAWE,EAAU,cAAgBF,EAAU,YAI7E,UAAUe,GAEN,IAAKA,EAAW9C,MAAM,yBAElB,OADAuB,QAAQC,IAAI,qCACL,KAEX,GAAIsB,EAAWJ,OAAS,EAEpB,OADAnB,QAAQC,IAAI,kBACL,KAGXD,QAAQC,IAAI,mBAAqBsB,EAAWJ,QAC5C,IAAI1C,EAAQ8C,EAAW9C,MAAM,uBAAwBqB,EAAQ,KAC7DE,QAAQC,IAAI,qBACZ,IACID,QAAQC,IAAI,2BACZH,EAAQrB,EAAQ,IAAIC,OAAOD,EAAM,GAAIA,EAAM,IAAM,IAAM,IAAIC,OAAO6C,EAAY,KAC9EvB,QAAQC,IAAI,4BACd,MAAOuB,GACLxB,QAAQC,IAAIuB,GAGhB,OADAxB,QAAQC,IAAI,iCACLH,GCrEA,MAAM2B,EACjB,YAAYC,GACRnC,KAAKf,MAAQ,IACbe,KAAKmC,KAAOA,EACZnC,KAAKoC,aAAe,IAAIrC,EACxBC,KAAKqC,SAGT,eAAerD,EAAKC,EAAQ,KACxB,IACIC,EADK,IAAIC,OAAO,IAAMF,EAAQ,OAASA,EAAQ,kBACpCG,KAAKJ,GACpB,OAAIE,EACO,CAAEjB,OAAQiB,EAAM,GAAIG,MAAOH,EAAM,IAEjC,CAAEjB,OAAQe,EAAKK,MAAO,KAIrC,UAAU2C,GACNvB,QAAQC,IAAI,qBACZ,IAAIH,EAAQP,KAAKjB,eAAeiD,GAAcE,EAAWI,mBAAoBtC,KAAKf,OAClFe,KAAKuC,QAAUhC,EAAMtC,OACrB+B,KAAKX,MAAQkB,EAAMlB,MAGvB,YAEI,OADAoB,QAAQC,IAAI,WACLV,KAAKwC,OAAOlB,WAGvB,YAAYiB,GACR9B,QAAQC,IAAI,iBACZ,IAAIe,EAAQzB,KAAKwC,OAAOlB,WAAWmB,YAAYzC,KAAKf,OACpDe,KAAKwC,OAAOE,aAAaH,EAAS,CAAEb,KAAM,EAAG7C,GAAI,GAAK,CAAE6C,KAAM,EAAG7C,GAAI4C,IACrEhB,QAAQC,IAAI,mBACZV,KAAK2C,cAGT,SAEI3C,KAAK4C,SAAWlF,SAASmF,eAAe,mBACxC,IAAIL,EAASxC,KAAKwC,OAAS,WAAWxC,KAAK4C,SAAU,CACjDE,WAAW,EACXC,UAAW,KACXC,YAAY,IAEhBR,EAAOS,GAAG,aAAa,CAACC,EAAIC,IAAQnD,KAAKoD,kBAAkBF,EAAIC,KAC/DX,EAAOS,GAAG,UAAU,CAACC,EAAIC,IAAQnD,KAAKqD,eAAeH,EAAIC,KACzDX,EAAOS,GAAG,WAAW,CAACC,EAAIC,IAAQnD,KAAKsD,gBAAgBJ,EAAIC,KAE3DX,EAAOe,gBAAkB,OACzBvD,KAAKwD,uBACLhB,EAAOiB,QAAQ,IAAK,IACpBzD,KAAK0D,MAAQxB,EAAWI,mBACxBtC,KAAKmC,KAAKwB,OAAS3D,KAAKwC,OAI5B,kBAAkBU,EAAIC,GAClB1C,QAAQC,IAAI,wBAGhB,gBAAgBwC,EAAIC,GAChB1C,QAAQC,IAAI,gBAAkByC,EAAIS,UAC7BT,EAAIS,SAAWT,EAAIU,UAA2B,IAAfV,EAAIW,UACpCX,EAAIY,iBACJ/D,KAAKuC,QAAU,IAIvB,eAAeW,EAAIC,GACf1C,QAAQC,IAAI,2BACZhD,SAASmF,eAAe,UAAU/E,UAAY,iBAC9CJ,SAASmF,eAAe,oBAAoB/E,UAAYoF,EAAG5B,WAC3DtB,KAAK2C,cACL,IAAI3D,EAAMmE,EAAIhB,KAAK,GACnB1B,QAAQC,IAAIyC,EAAIa,KAAKnF,GAAK,IAAMsE,EAAIc,GAAGpF,GAAK,IAAMsE,EAAIhB,KAAK,GAAK,IAAMgB,EAAIe,QAAU,IAAMf,EAAIgB,QAU9FnE,KAAKoC,aAAaJ,WAAakB,EAAG5B,WAClCtB,KAAKoC,aAAaxB,OAASZ,KAAKmC,KAAKe,GACrClD,KAAKoC,aAAavC,OAASnC,SAASmF,eAAe,UACnD7C,KAAKoC,aAAalD,MASdF,EAAI4C,OAAS,IAAM5C,EAAIE,MAAM,0BAA4C,IAAhBiE,EAAIa,KAAKnF,IAAYsE,EAAIc,GAAGpF,IAAM,EAAIsE,EAAIe,QAAQ,GAAGtC,OAE9GnB,QAAQC,IAAI,iBAGhBD,QAAQC,IAAI,oBACZV,KAAK0D,MAAQ1E,GAGjB,SAASkE,EAAIzB,GACT,GAAa,MAATA,EAAiB,OAAO,KAC5B,IAAIF,EAAM2B,EAAG1B,aAAaC,GAAQ2C,EAAOlB,EAAGmB,WAAW9C,GAMvD,OALAd,QAAQC,IAAIa,GACZ6C,EAAKE,EAAIF,EAAKG,KACdH,EAAKI,EAAIJ,EAAKK,IACdL,EAAK/F,MAAQ+F,EAAKM,MAAQN,EAAKG,KAC/BH,EAAK9F,OAAS8F,EAAKO,OAASP,EAAKK,IAC1BL,EAGX,aAAaQ,EAAMzC,GACf,IAAIrB,EACAK,EAAU,EACd,IAAIJ,EAAOC,EAAOC,EAClBF,EAAQ,IAAIM,KACZ,IAAI6B,EAAKlD,KAAKmC,KAAKe,GACf9B,EAAmB,EACnBF,EAAc,EAClB,KAAqC,QAA7BJ,EAAQ8D,EAAKxF,KAAK+C,KAAiB,CAEvChB,IAEAH,EAAQ,IAAIK,KACZJ,EAAUa,KAAKC,IAAIhB,EAAQC,GAAS,IACpC,IAAIO,EAAM2B,EAAG1B,aAAaV,EAAMW,OAChCP,EAAcK,EAAIG,KAClBN,EAAmBG,EAAI1C,GAGvB,IAAI8C,EAAMP,EAAmBN,EAAM,GAAGc,OAOtC,GANAnB,QAAQC,IAAIa,GACZd,QAAQC,IAAI,iBAAmBa,EAAIG,KAAO,aAAeN,EAAmB,SAAWO,GAIvFuB,EAAGrB,SAAS,CAAEH,KAAMH,EAAIG,KAAM7C,GAAIuC,GAAoB,CAAEM,KAAMH,EAAIG,KAAM7C,GAAI8C,GAAO,CAAErE,UAAW,sBAC5F2D,EAAU,EACV,MAGRR,QAAQC,IAAI,gBAAkBS,GAE1BzD,SAASmF,eAAe,UAAU/E,UADlCmD,EAAU,EACoC,SAAWE,EAAU,cAAgBF,EAAU,kCAE/C,SAAWE,EAAU,cAAgBF,EAAU,YAIrG,cACIR,QAAQC,IAAI,eAGhB,SACID,QAAQC,IAAI,UAGhB,SAAS1B,EAAKmE,GACV,IAAKnE,EAAIE,MAAM,yBAEX,OADAuB,QAAQC,IAAI,qCACL,KAEX,GAAI1B,EAAI4C,OAAS,EAEb,OADAnB,QAAQC,IAAI,kBACL,KAWXD,QAAQC,IAAI,kBAAoB1B,EAAI4C,QACpC,IAAI1C,EAAQF,EAAIE,MAAM,uBAAwBqB,EAAQ,KACtDE,QAAQC,IAAI,oBACZ,IACID,QAAQC,IAAI,0BACZH,EAAQrB,EAAQ,IAAIC,OAAOD,EAAM,GAAIA,EAAM,IAAM,IAAM,IAAIC,OAAOH,EAAK,KACvEyB,QAAQC,IAAI,2BACd,MAAOuB,GACLxB,QAAQC,IAAIuB,GAGhB,OADAxB,QAAQC,IAAI,gCACLH,EAIX,uBACIE,QAAQC,IAAI,6BACZ,IAAI8B,EAASxC,KAAKwC,OAClBA,EAAOqC,SAAS,QAGhBrC,EAAOsC,SAASjD,SAAS,CAAEH,KAAM,EAAG7C,GAAI,GAAK,CACzC6C,KAAM,EACN7C,GAAI,GACL,CACCvB,UAAW,gBACXyH,UAAU,EACVC,QAAQ,EACRC,eAAe,IAInBzC,EAAOsC,SAASjD,SAAS,CAAEH,KAAM,EAAG7C,GAAI,GAAK,CACzC6C,KAAM,EACN7C,GAAI,GACL,CACCvB,UAAW,gBACXyH,UAAU,EACVC,QAAQ,EACRE,gBAAgB,IAEpBlF,KAAK2C,eAKbT,EAAWI,mBAAqB,iBClOhC,IAAI,EAAO,ICFI,MACX,YAAY5C,GACRM,KAAKf,MAAQ,IACbe,KAAKoC,aAAe,IAAIrC,EACxBC,KAAKmF,OAGT,SAEI,OADA1E,QAAQC,IAAI,sBACLV,KAAKwC,OAGhB,WAAW4C,GACP3E,QAAQC,IAAI,wBAA0B0E,GACtCpF,KAAKqF,QAAUD,EAGnB,OACI3E,QAAQC,IAAI,mBACZV,KAAK4C,SAAWlF,SAASmF,eAAe,UAExC7C,KAAKwC,OAAS1D,WAAWwG,aAAatF,KAAK4C,SAAU,CACjDpE,aAAa,EACb+G,mBAAmB,IAEvBvF,KAAKwC,OAAOS,GAAG,UAAU,CAACC,EAAIC,IAAQnD,KAAKwF,mBAAmBtC,EAAIC,KAElEnD,KAAKwC,OAAOqC,SAAS7E,KAAK4C,SAASc,OAGvC,mBAAmBR,EAAIC,GACnB1C,QAAQC,IAAI,8BAAgCV,KAAKqF,SACjD3H,SAASmF,eAAe,UAAU/E,UAAY,iBAC1CkC,KAAKqF,UACL5E,QAAQC,IAAI,cACZV,KAAKoC,aAAaJ,WAAahC,KAAKqF,QAAQ/D,WAC5CtB,KAAKoC,aAAaxB,OAASsC,EAC3BlD,KAAKoC,aAAavC,OAASnC,SAASmF,eAAe,UACnD7C,KAAKoC,aAAalD,SDnCpB,IAAIgD,EAAW,I","file":"main.bundle.js","sourcesContent":["let DOMUtils = {}, $ = DOMUtils;\r\nexport default DOMUtils;\r\n\r\n$.create = function(type, className, content, parent) {\r\n\tlet element = document.createElement(type || \"div\");\r\n\tif (className) { element.className = className; }\r\n\tif (content) {\r\n\t\tif (content instanceof HTMLElement) { element.appendChild(content); }\r\n\t\telse { element.innerHTML = content; }\r\n\t}\r\n\tif (parent) { parent.appendChild(element); }\r\n\treturn element;\r\n};\r\n\r\n$.copy = function(target, source) {\r\n\tfor (let n in source) { target[n] = source[n]; }\r\n\treturn target;\r\n}\r\n\r\n$.createCM = function(target, opts = {}, width = \"100%\", height = \"100%\") {\r\n    let o = $.copy({\r\n        lineNumbers: false,\r\n        tabSize: 3,\r\n        indentWithTabs: true,\r\n        specialChars: /[ \\u0000-\\u001f\\u007f-\\u009f\\u00ad\\u061c\\u200b-\\u200f\\u2028\\u2029\\ufeff]/,\r\n        specialCharPlaceholder: (ch) => $.create(\"span\", ch === \" \" ? \"cm-space\" : \"cm-special\", \" \") // needs to be a space so wrapping works\r\n    }, opts);\r\n\t//var cm = new CodeMirror.fromTextArea(target, o);\r\n    let cm = CodeMirror(target, o);\r\n    return cm;\r\n}\r\n\r\n$.decomposeRegEx = function(str, delim=\"/\") {\r\n\tlet re = new RegExp(\"^\"+delim+\"(.*)\"+delim+\"([igmsuUxy]*)$\");\r\n\tlet match = re.exec(str);\r\n\tif (match) {\r\n\t\treturn {source: match[1], flags: match[2]};\r\n\t} else {\r\n\t\treturn {source: str, flags: \"g\"};\r\n\t}\r\n};\r\n\r\n$.query = function(query, element = document.body) {\r\n\treturn (query[0] === \">\") ? $._childQuery(query, element, $.query) : element.querySelector(query);\r\n};\r\n\r\n$._childQuery = function(query, el, f) {\r\n\tif (!el.id) { el.id = \"___tmp_id\"; }\r\n\tlet result = f(\"#\"+el.id+\" \"+query, el.parentNode);\r\n\tif (el.id === \"___tmp_id\") { el.id = \"\"; }\r\n\treturn result;\r\n};\r\n","export default class MatchPattern {\r\n\r\n    get expression() { return this._expression;}\r\n    set expression(newExp) {\r\n        this._expression = newExp;\r\n    }\r\n\r\n    get textcm() { return this._textcm;}\r\n    set textcm(newTextCm) {\r\n        this._textcm = newTextCm;\r\n    }\r\n\r\n    get result() { return this._result;}\r\n    set result(newTResult) {\r\n        this._result = newTResult;\r\n    }\r\n\r\n    get match() {\r\n        let regex = this._getRegex(this._expression);\r\n        if (regex) {\r\n            console.log('finding patterns...');\r\n            this._match(regex, this._textcm, this._result);\r\n        }\r\n    }\r\n\r\n    _match(regex, textcm, resultDiv) {\r\n        let array, counter = 0, date1, date2, seconds, currentLineIndex = 0, currentLine;\r\n        date1 = new Date();\r\n        while ((array = regex.exec(textcm.getValue())) !== null) {\r\n            let pos = textcm.posFromIndex(array.index);\r\n            currentLine = pos.line;\r\n            currentLineIndex = pos.ch;\r\n            var len = currentLineIndex + array[0].length;\r\n            textcm.markText({ line: pos.line, ch: currentLineIndex }, { line: pos.line, ch: len }, { className: \"styled-background\" });\r\n\r\n            counter++;\r\n            date2 = new Date();\r\n            seconds = Math.abs(date1 - date2) / 1000;\r\n            if (seconds > 2) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (seconds > 2) {\r\n            resultDiv.innerHTML = 'Found ' + counter + ' matches @ ' + seconds + ' seconds. Backtracking Detected';\r\n        } else {\r\n            resultDiv.innerHTML = 'Found ' + counter + ' matches @ ' + seconds + ' seconds.';\r\n        }\r\n    }\r\n\r\n    _getRegex(expression) {\r\n\r\n        if (!expression.match(/^\\/.+[^\\\\]\\/[a-z]*$/ig)) {\r\n            console.log('!exp.match(/^\\/.+[^\\\\]\\/[a-z]*$/ig)');\r\n            return null;\r\n        }\r\n        if (expression.length < 3) {\r\n            console.log('exp.length < 3');\r\n            return null;\r\n        }\r\n\r\n        console.log('_getRegex(str)->' + expression.length);\r\n        let match = expression.match(/^\\/(.+)\\/([a-z]+)?$/), regex = null;\r\n        console.log('_getRegex(str)...');\r\n        try {\r\n            console.log('_getRegex(str)...in try');\r\n            regex = match ? new RegExp(match[1], match[2] || \"\") : new RegExp(expression, \"g\");\r\n            console.log('_getRegex(str)...in last');\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n        console.log('_getRegex(str)...returning...');\r\n        return regex;\r\n    }\r\n}","import $ from \"./utils/DOMUtils\";\r\nimport MatchPattern from \"./utils/MatchPattern\";\r\n\r\nexport default class Expression {\r\n    constructor(text) {\r\n        this.delim = \"/\";\r\n        this.text = text;\r\n        this.matchPattern = new MatchPattern();\r\n        this.initUI();\r\n    }\r\n\r\n    decomposeRegEx(str, delim = \"/\") {\r\n        let re = new RegExp(\"^\" + delim + \"(.*)\" + delim + \"([igmsuUxy]*)$\");\r\n        let match = re.exec(str);\r\n        if (match) {\r\n            return { source: match[1], flags: match[2] };\r\n        } else {\r\n            return { source: str, flags: \"g\" };\r\n        }\r\n    };\r\n\r\n    set value(expression) {\r\n        console.log('value(expression)');\r\n        let regex = this.decomposeRegEx(expression || Expression.DEFAULT_EXPRESSION, this.delim);\r\n        this.pattern = regex.source;\r\n        this.flags = regex.flags;\r\n    }\r\n\r\n    get value() {\r\n        console.log('value()');\r\n        return this.editor.getValue();\r\n    }\r\n\r\n    set pattern(pattern) {\r\n        console.log('set pattern()');\r\n        let index = this.editor.getValue().lastIndexOf(this.delim);\r\n        this.editor.replaceRange(pattern, { line: 0, ch: 1 }, { line: 0, ch: index });\r\n        console.log('setting pattern');\r\n        this.deferUpdate();\r\n    }\r\n\r\n    initUI() {\r\n        //this.editorEl = $.query(\"> .editor\", el);\r\n        this.editorEl = document.getElementById('expressionInput');\r\n        let editor = this.editor = $.createCM(this.editorEl, {\r\n            autofocus: true,\r\n            maxLength: 2500,\r\n            singleLine: true\r\n        });\r\n        editor.on(\"mousedown\", (cm, evt) => this.onEditorMouseDown(cm, evt));\r\n        editor.on(\"change\", (cm, evt) => this.onEditorChange(cm, evt));\r\n        editor.on(\"keydown\", (cm, evt) => this.onEditorKeyDown(cm, evt));\r\n        // hacky method to disable overwrite mode on expressions to avoid overwriting flags:\r\n        editor.toggleOverwrite = () => { };\r\n        this.setInitialExpression();\r\n        editor.setSize(500, 50);\r\n        this.value = Expression.DEFAULT_EXPRESSION;\r\n        this.text.expmon = this.editor;\r\n        \r\n    }\r\n\r\n    onEditorMouseDown(cm, evt) {\r\n        console.log('_onEditorMouseDown->');\r\n    }\r\n\r\n    onEditorKeyDown(cm, evt) {\r\n        console.log('evt.ctrlKey->' + evt.ctrlKey);\r\n        if ((evt.ctrlKey || evt.metaKey) && evt.keyCode == 68) {\r\n            evt.preventDefault();\r\n            this.pattern = \"\";\r\n        }\r\n    }\r\n\r\n    onEditorChange(cm, evt) {\r\n        console.log('onEditorChange(cm, evt)');\r\n        document.getElementById('result').innerHTML = 'Processing... ';\r\n        document.getElementById('expressiontotest').innerHTML = cm.getValue();\r\n        this.deferUpdate();\r\n        let str = evt.text[0];\r\n        console.log(evt.from.ch + ',' + evt.to.ch + \",\" + evt.text[0] + ',' + evt.removed + ',' + evt.origin);\r\n        // if (evt.origin == 'paste') {\r\n        //     var text = evt.text[0]; // pasted string\r\n        //     var new_text = '' + text + ''; // any operations here\r\n\r\n        //     this.value = new_text;\r\n        //     console.log('paste detected->' + new_text);\r\n        //     return;\r\n        // }\r\n       \r\n        this.matchPattern.expression = cm.getValue();\r\n        this.matchPattern.textcm = this.text.cm;\r\n        this.matchPattern.result = document.getElementById('result');\r\n        this.matchPattern.match;\r\n        // let myRe = this.getRegex(cm.getValue(), evt);\r\n        // console.log('after regex iniit');\r\n        // if (myRe) {\r\n        //     console.log('finding patterns...');\r\n        //     setTimeout(this.matchPattern(myRe, document.getElementById('editor').value), 2000);\r\n        //     //this.matchPattern(myRe,document.getElementById('editor').value);\r\n        // }\r\n        // console.log('after regex...');\r\n        if (str.length < 3 || !str.match(/^\\/.+[^\\\\]\\/[a-z]*$/ig) || evt.from.ch !== 1 || evt.to.ch != 1 + evt.removed[0].length) {\r\n            // not pasting a full expression.\r\n            console.log('returning...');\r\n            return;\r\n        }\r\n        console.log('setting value...');\r\n        this.value = str;\r\n    }\r\n\r\n    charRect(cm, index) {\r\n        if (index == null) { return null; }\r\n        let pos = cm.posFromIndex(index), rect = cm.charCoords(pos);\r\n        console.log(pos);\r\n        rect.x = rect.left;\r\n        rect.y = rect.top;\r\n        rect.width = rect.right - rect.left;\r\n        rect.height = rect.bottom - rect.top;\r\n        return rect;\r\n    }\r\n\r\n    matchPattern(myRe, text) {\r\n        let array;\r\n        let counter = 0;\r\n        var date1, date2, seconds;\r\n        date1 = new Date();\r\n        let cm = this.text.cm;\r\n        let currentLineIndex = 0;\r\n        let currentLine = 0;\r\n        while ((array = myRe.exec(text)) !== null) {\r\n            //console.log(`Found ${array[0]}. Next starts at ${myRe.lastIndex}.`);\r\n            counter++;\r\n            //console.log('while loop' + counter);\r\n            date2 = new Date();\r\n            seconds = Math.abs(date1 - date2) / 1000;\r\n            let pos = cm.posFromIndex(array.index);\r\n            currentLine = pos.line;\r\n            currentLineIndex = pos.ch;\r\n\r\n\r\n            var len = currentLineIndex + array[0].length;\r\n            console.log(pos);\r\n            console.log('marking line->' + pos.line + ', charAt->' + currentLineIndex + ',len->' + len);\r\n\r\n            // console.log(this.charRect(this.text.cm,array.index));\r\n            //this.text.cm.getDoc().markText(array.index,len,{ className: \"styled-background\" });\r\n            cm.markText({ line: pos.line, ch: currentLineIndex }, { line: pos.line, ch: len }, { className: \"styled-background\" });\r\n            if (seconds > 2) {\r\n                break;\r\n            }\r\n        }\r\n        console.log('result size->' + counter);\r\n        if (seconds > 2) {\r\n            document.getElementById('result').innerHTML = 'Found ' + counter + ' matches @ ' + seconds + ' seconds. Backtracking Detected';\r\n        } else {\r\n            document.getElementById('result').innerHTML = 'Found ' + counter + ' matches @ ' + seconds + ' seconds.';\r\n        }\r\n    }\r\n\r\n    deferUpdate() {\r\n        console.log('deferUpdate');\r\n    }\r\n\r\n    update() {\r\n        console.log('update');\r\n    }\r\n    // /\\b/g\r\n    getRegex(str, evt) {\r\n        if (!str.match(/^\\/.+[^\\\\]\\/[a-z]*$/ig)) {\r\n            console.log('!str.match(/^\\/.+[^\\\\]\\/[a-z]*$/ig)');\r\n            return null;\r\n        }\r\n        if (str.length < 3) {\r\n            console.log('str.length < 3');\r\n            return null;\r\n        }\r\n        // if (evt.from.ch !== 1) {\r\n        //     console.log('evt.from.ch !== 1');\r\n        //     return null;\r\n        // }\r\n        // if (evt.to.ch != 1 + evt.removed[0].length) {\r\n        //     console.log('evt.to.ch != 1 + evt.removed[0].length');\r\n        //     return null;\r\n        // }\r\n\r\n        console.log('getRegex(str)->' + str.length);\r\n        let match = str.match(/^\\/(.+)\\/([a-z]+)?$/), regex = null;\r\n        console.log('getRegex(str)...');\r\n        try {\r\n            console.log('getRegex(str)...in try');\r\n            regex = match ? new RegExp(match[1], match[2] || \"\") : new RegExp(str, \"g\");\r\n            console.log('getRegex(str)...in last');\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n        console.log('getRegex(str)...returning...');\r\n        return regex;\r\n    }\r\n\r\n\r\n    setInitialExpression() {\r\n        console.log('setInitialExpression(str)');\r\n        let editor = this.editor;\r\n        editor.setValue(\"/./g\");\r\n\r\n        // leading /\r\n        editor.getDoc().markText({ line: 0, ch: 0 }, {\r\n            line: 0,\r\n            ch: 1\r\n        }, {\r\n            className: \"exp-decorator\",\r\n            readOnly: true,\r\n            atomic: true,\r\n            inclusiveLeft: true\r\n        });\r\n\r\n        // trailing /g\r\n        editor.getDoc().markText({ line: 0, ch: 2 }, {\r\n            line: 0,\r\n            ch: 4\r\n        }, {\r\n            className: \"exp-decorator\",\r\n            readOnly: false,\r\n            atomic: true,\r\n            inclusiveRight: true\r\n        });\r\n        this.deferUpdate();\r\n    }\r\n\r\n\r\n}\r\nExpression.DEFAULT_EXPRESSION = '\\\\b[A-Z].*?\\\\b';","\r\n\r\nimport Expression from \"./Expression\";\r\nimport TestText from \"./TestText\";\r\n\r\nlet text = new TestText();\r\nlet app = new Expression(text);\r\n\r\n","\r\nimport MatchPattern from \"./utils/MatchPattern\";\r\n\r\nexport default class TestText {\r\n    constructor(el) {\r\n        this.delim = \"/\";\r\n        this.matchPattern = new MatchPattern();\r\n        this.init();\r\n    }\r\n\r\n    get cm() {\r\n        console.log('get code monitor()');\r\n        return this.editor;\r\n    }\r\n\r\n    set expmon(newexpmon) {\r\n        console.log('set setExpMon(expmon)' + newexpmon);\r\n        this._expmon = newexpmon;\r\n    }\r\n\r\n    init() {\r\n        console.log('TestText init()');\r\n        this.editorEl = document.getElementById(\"editor\");\r\n\r\n        this.editor = CodeMirror.fromTextArea(this.editorEl, {\r\n            lineNumbers: true,\r\n            styleSelectedText: true\r\n        });\r\n        this.editor.on(\"change\", (cm, evt) => this.onTextEditorChange(cm, evt));\r\n\r\n        this.editor.setValue(this.editorEl.value);\r\n    }\r\n\r\n    onTextEditorChange(cm, evt) {\r\n        console.log('onTextEditorChange(cm, evt)' + this._expmon);\r\n        document.getElementById('result').innerHTML = 'Processing... ';\r\n        if (this._expmon) {\r\n            console.log('finding...');\r\n            this.matchPattern.expression = this._expmon.getValue();\r\n            this.matchPattern.textcm = cm;\r\n            this.matchPattern.result = document.getElementById('result');\r\n            this.matchPattern.match;\r\n        }\r\n    }\r\n}"],"sourceRoot":""}