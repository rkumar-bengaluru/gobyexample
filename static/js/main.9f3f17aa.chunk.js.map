{"version":3,"sources":["registerServiceWorker.js","components/layout2/header/index.js","components/layout2/footer/index.js","components/layout2/top.js","components/layout2/index.js","components/logger/index.js","components/rest/cmd.js","components/rest/model.js","components/rest/routes.js","components/rest/test.js","components/rest/index.js","components/restgin/main.js","components/restgin/model.js","components/restgin/routes.js","components/restgin/index.js","components/search/parallel.js","components/search/parallelwithtimeout.js","components/search/replicas.js","components/search/serial.js","components/search/home.js","components/search/index.js","components/algorithms/palindrome/index.js","components/app/index.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","Header2","props","className","href","src","alt","class","rel","Footer2","year","Date","style","color","getFullYear","ScrollToTop","useState","isVisible","setIsVisible","toggleVisibility","pageYOffset","useEffect","addEventListener","onClick","scrollTo","top","behavior","AppLayout2","showSideBar","showSubscribeButton","autoBind","Fragment","this","children","Component","GoLogger","React","main","setMain","value","highlight","code","languages","js","padding","fontFamily","fontSize","onValueChange","target","RestCmd","app","RestModel","model","setModel","func","setFunc","depencies","setDepencies","all","setAll","inmem","setInMem","RestRoutes","dep","setDep","setApp","over","setOver","rerr","setRErr","cmd","setCmd","run","setRun","RestTest","m","setM","RestInGo","Main","Model","modelt","setModelt","Routes","RestGin","ParallelSearch","classNamae","ParallelWithTimeout","ReplicaSearch","service","setService","SerialSearch","Home","colSer","setColSer","colPar","seColPar","colTim","seColTim","colRep","seColRep","SearchEngine","initial","current","prev","useReducer","action","type","Palindrome","test","App","dispatch","ReactDOM","render","exact","path","component","document","getElementById","URL","process","origin","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.9f3f17aa.chunk.js","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/firebase-messaging-sw.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, {  } from 'react';\r\n\r\nconst Header2 = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"row justify-content-between border-bottom m-1 bg-primary\">\r\n                <div className=\"d-flex flex-wrap align-content-center\">\r\n                    <div className=\"col-md-auto\">\r\n                        {/* {!showSideBar &&\r\n                            <button type=\"button\" className=\"btn btn-primary\" onClick={() => handleShowSideBar()}>\r\n                                <i class=\"fas fa-bars\"></i>\r\n                            </button>\r\n                        } */}\r\n                        {/* Side Bar Navigation Starts Here */}\r\n                        {/*showSideBar && renderNavigationBar()*/}\r\n                        {/* Side Bar Navigation Ends Here */}\r\n                        <a href=\"/\">\r\n                            <img src='/gobyexample/go/logo.jpg' alt=\"LocalShop\"></img>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-md-auto\"><h2 class=\"text-white\"><span class=\"footer-h3 text-white\" >Learn Go By Example</span></h2></div>\r\n                <div className=\"col-md-auto\">\r\n                    {\r\n                        <>\r\n                        <a className=\"nav-link ml-2 mr-2 text-white\"\r\n                                        href=\"/gobyexample\"\r\n                                        rel=\"noopener noreferrer\">Home\r\n                                        <span className=\"sr-only\">(current)</span>\r\n                                    </a>\r\n                        \r\n                        </>\r\n                    }\r\n                </div>\r\n            </div>\r\n            \r\n        </div>\r\n    );\r\n}\r\nexport default Header2;","import React, { } from 'react';\r\nconst Footer2 = (props) => {\r\n\r\n    var year = new Date();\r\n    return (\r\n        <div class=\"row justify-content-left border-bottom m-5\">\r\n            <footer>\r\n                <div class=\"d-flex flex-wrap align-content-center bg-white\">\r\n                    <div class=\"col-md-auto ml-5\">\r\n                        <h3 class=\"footer-h3\">\r\n                            About<span style={{ color: \"#FFCC48\" }}>GoByExample</span>\r\n                        </h3>\r\n\r\n                        {/* <p class=\"font-weight-bold text-black\">\r\n                            <a class=\"font-weight-bold text-black\" href=\"/\">Home</a>\r\n                            |\r\n                            <a class=\"font-weight-bold text-black\" href=\"/blog/about.html\">About</a>\r\n                            |\r\n                            <a class=\"font-weight-bold text-black\" href=\"/blog/contact.html\">Contact</a>\r\n                            |\r\n                            <a class=\"font-weight-bold text-black\" href=\"/blog/techblogs.html\">Blog</a>\r\n                        </p> */}\r\n                        <p class=\"font-weight-normal text-black\">© 2018-\r\n                            {year.getFullYear()}\r\n                             @Rupak Kumar.\r\n                        </p>\r\n                    </div>\r\n                    <div class=\"col-md-auto ml-5\">\r\n                        <p class=\"font-weight-bold text-black\">\r\n                            <i class=\"fa fa-2x fa-map-marker\"></i><span> #202, LG Halli, Bengaluru - 560094</span>\r\n                        </p>\r\n\r\n                        <p class=\"font-weight-bold text-black\">\r\n                            <i class=\"fa fa-2x fa-phone\"></i><span> +91 9113584362</span>\r\n                        </p>\r\n\r\n                        <p class=\"font-weight-bold text-black\">\r\n                            <i class=\"fa fa-2x fa-envelope\"></i><span> <a\r\n                                href=\"mailto:admin@vlocalshop.in\">rupak.kumar.ambasta@gmail.com</a></span>\r\n                        </p>\r\n\r\n                    </div>\r\n                    <div class=\"col\">\r\n                        <p>\r\n                            <span class=\"font-weight-bold text-black\">About Me</span><br />\r\n                            <p class=\"font-weight-normal text-black\">\r\n                            A creative technologist, thought leader and problem solver with 20+ years of experience as development \r\nmanager, team manager, architect and developer in various application and infrastructure domains.</p>\r\n                        </p>\r\n                        <div>\r\n                            {/* <a href=\"https://www.facebook.com/vlocal.s/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                                <span style={{ color: socialMediaColors.facebook }}>\r\n                                    <i class=\"fab fa-3x fa-facebook-square\"></i>&nbsp;&nbsp;\r\n                                </span>\r\n                            </a>\r\n                            <a href=\"https://twitter.com/vlocalshop\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                                <span style={{ color: socialMediaColors.twitter }}>\r\n                                    <i class=\"fab fa-3x fa-twitter-square\"></i>&nbsp;&nbsp;\r\n                                </span>\r\n                            </a>\r\n                            <a href=\"https://in.pinterest.com/vlocalshop/_saved/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                                <span style={{ color: socialMediaColors.pinterest }}>\r\n                                    <i class=\"fab fa-3x fa-pinterest-square\"></i>&nbsp;&nbsp;\r\n                                </span>\r\n                            </a>\r\n                            <a href=\"https://www.instagram.com/vlocalshop.in12/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                                <span style={{ color: socialMediaColors.instagram }}>\r\n                                    <i class=\"fab fa-3x fa-instagram-square\"></i>&nbsp;&nbsp;\r\n                                </span>\r\n                            </a>\r\n                            <a href=\"https://www.linkedin.com/in/vlocal-shop-707736205/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                                <span style={{ color: socialMediaColors.linkedin }}>\r\n                                    <i class=\"fab fa-3x fa-linkedin-square\"></i>&nbsp;&nbsp;\r\n                                </span>\r\n                            </a>\r\n                            <a href=\"https://www.youtube.com/channel/UCUonfa3DSprijW_xR9Xs16w\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                                <span style={{ color: socialMediaColors.youtube }}>\r\n                                    <i class=\"fab fa-3x fa-youtube-square\"></i>&nbsp;&nbsp;\r\n                                </span>\r\n                            </a>\r\n                            <a href=\"https://api.whatsapp.com/send/?phone=919113584362\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                                <span style={{ color: socialMediaColors.whatsapp }}>\r\n                                    <i class=\"fab fa-3x fa-whatsapp-square\"></i>&nbsp;&nbsp;\r\n                                </span>\r\n                            </a> */}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </footer>\r\n        </div>\r\n    );\r\n}\r\nexport default Footer2;","import React, { useEffect, useState } from \"react\";\r\n\r\nexport default function ScrollToTop() {\r\n    const [isVisible, setIsVisible] = useState(false);\r\n\r\n    // Show button when page is scorlled upto given distance\r\n    const toggleVisibility = () => {\r\n        if (window.pageYOffset > 300) {\r\n            setIsVisible(true);\r\n        } else {\r\n            setIsVisible(false);\r\n        }\r\n    };\r\n\r\n    // Set the top cordinate to 0\r\n    // make scrolling smooth\r\n    const scrollToTop = () => {\r\n        window.scrollTo({\r\n            top: 0,\r\n            behavior: \"smooth\"\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"scroll\", toggleVisibility);\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"scroll-to-top\">\r\n            {isVisible &&\r\n                <div onClick={scrollToTop}>\r\n                    <img src='/gobyexample/icons/top.svg' alt='Go to top' />\r\n                </div>}\r\n        </div>\r\n    );\r\n}\r\n","import React, { Component } from 'react';\n\nimport Header2 from './header';\nimport Footer2 from './footer';\nimport './index.css';\nimport ScrollToTop from './top.js';\nimport autoBind from 'react-autobind';\n\n\nexport default class AppLayout2 extends Component {\n   \n    constructor(props) {\n        super(props)\n        this.state = {\n            showSideBar: false,\n            showSubscribeButton : true\n        }\n\n        autoBind(this, 'subscribe','post');\n    }\n    render() {\n        return (\n            <React.Fragment>\n                <div class=\"container-fluid\">\n                    <ScrollToTop />\n                    <Header2 />\n                    {this.props.children}\n                    <Footer2 />\n                </div>\n            </React.Fragment>\n        );\n    }\n}","\r\nimport React from 'react';\r\nimport Editor from 'react-simple-code-editor';\r\nimport { highlight, languages } from 'prismjs/components/prism-core';\r\nimport 'prismjs/components/prism-clike';\r\nimport 'prismjs/components/prism-javascript';\r\nimport 'prismjs/themes/prism.css';\r\n\r\nconst GoLogger = (props) => {\r\n   \r\n      const [main, setMain] = React.useState(\r\n        `\\t#cmd/main.go\r\n        package main\r\n\r\n        import (\r\n            \"github.com/rkumar-bengaluru/go/logger\"\r\n        )\r\n        \r\n        func main() {\r\n            \\tlogger.New().Info(\"default logger\")\r\n        }\\n`\r\n      );\r\n    return (\r\n        <div className=\"container\">\r\n            <h2>Logging in Go</h2>\r\n            <p>\r\n                As a experienced developer the first thing that comes in mind for a project is\r\n                logging even for basic hello world in any programming language you start with is\r\n                printing the hello message. However it would be great if we start with logging the\r\n                hello message as any project you will end up there.\r\n            </p>\r\n            <h3>Limitation of Default Go Logger</h3>\r\n            <p>I have spent most of time in Java and first thing i would like to see is what to log and \r\n                and what is the level of the log example debug, info, warning, error. This default\r\n                levelled based logging is missing in default log in Go. Not sure why they designed \r\n                it that way probably they left it for open source developers to jump in and create\r\n                that for Go :)\r\n            </p>\r\n            <h4>Let's build a Custom Go Logger</h4>\r\n            <p>So this is my first go lang project, build a logger with different levels of logging.</p>\r\n            \r\n            <div className=\"row\">\r\n                <div className=\"col\">\r\n                    <h5>Step 01</h5>\r\n                   <p>Go to your project root directory and run the following commands:</p>\r\n                    <Editor\r\n                            value=\"# go work init\"\r\n                                \r\n                            highlight={code => highlight(code, languages.js)}\r\n                            padding={10}\r\n                            style={{\r\n                                fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\r\n                                fontSize: 12,\r\n                            }} />\r\n                    <p>\r\n                        This will create your project workspace go.work. Inside the project \r\n                        root directory create 2 folders, cmd :- Keep your main.go source file, \r\n                        go runtime uses this and logger :- Keep your logger.go source code.\r\n                    </p>\r\n                </div>\r\n                \r\n                <div className=\"col\">\r\n                <h5>Step 02</h5>\r\n                   <p>Will use Zap logger in the background and will provide abstraction of a \r\n                       custom logger for this project</p>\r\n                       <Editor\r\n                            value='\r\n                            #logger.go\r\n                            // first struct in go\r\n                            type Logger struct {\r\n                                log *zap.Logger\r\n                            }\r\n                            // define a function for Logger.\r\n                            func (logger *Logger) Info(msg string) {\r\n                                logger.log.Info(msg)\r\n                            }'\r\n                            \r\n                                \r\n                            highlight={code => highlight(code, languages.js)}\r\n                            padding={10}\r\n                            style={{\r\n                                fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\r\n                                fontSize: 12,\r\n                            }} />\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col\">\r\n                   <h5>Step 03 - Create a New function to initialize logger</h5>\r\n                   <Editor\r\n                        value=\"func New() *Logger {\r\n                            l, _ := zap.NewProduction()\r\n                            defer l.Sync()\r\n                            return &Logger{l}\r\n                        }\"\r\n                           \r\n                        highlight={code => highlight(code, languages.js)}\r\n                        padding={10}\r\n                        style={{\r\n                            fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\r\n                            fontSize: 12,\r\n                        }} />\r\n                </div>\r\n                <div className=\"col\">\r\n                    <h5>Step 04 - import zapper packages</h5>\r\n                    <Editor\r\n                        value='import (\r\n                            \"go.uber.org/zap\"\r\n                            \"go.uber.org/zap/zapcore\"\r\n                            \"gopkg.in/natefinch/lumberjack.v2\"\r\n                        )'\r\n                           \r\n                        highlight={code => highlight(code, languages.js)}\r\n                        padding={10}\r\n                        style={{\r\n                            fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\r\n                            fontSize: 12,\r\n                        }} />\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col\">\r\n                   <h5>Step 05 - Create Module files</h5>\r\n                   <Editor\r\n                        value=\"go mod init github.com/rkumar-bengaluru/go/logger\"\r\n                           \r\n                        highlight={code => highlight(code, languages.js)}\r\n                        padding={10}\r\n                        style={{\r\n                            fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\r\n                            fontSize: 12,\r\n                        }} />\r\n                    <p>This will create go.mod file</p>\r\n                </div>\r\n                <div className=\"col\">\r\n                    <h5>Step 06 - Install third party packages and resolve dependencies</h5>\r\n                    <Editor\r\n                        value='go mod tidy'\r\n                          \r\n                        highlight={code => highlight(code, languages.js)}\r\n                        padding={10}\r\n                        style={{\r\n                            fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\r\n                            fontSize: 12,\r\n                        }} />\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col\">\r\n                   <h5>Step 07 - Final Go.mod as below</h5>\r\n                   <Editor\r\n                        value=\"module github.com/rkumar-bengaluru/go/logger\r\n\r\n                        go 1.18\r\n                        \r\n                        require (\r\n                            go.uber.org/zap v1.21.0\r\n                            gopkg.in/natefinch/lumberjack.v2 v2.0.0\r\n                        )\r\n                        \r\n                        require (\r\n                            github.com/BurntSushi/toml v1.1.0 // indirect\r\n                            go.uber.org/atomic v1.7.0 // indirect\r\n                            go.uber.org/multierr v1.6.0 // indirect\r\n                        )\"\r\n                           \r\n                        highlight={code => highlight(code, languages.js)}\r\n                        padding={10}\r\n                        style={{\r\n                            fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\r\n                            fontSize: 12,\r\n                        }} />\r\n                    <p>This will create go.mod file</p>\r\n                </div>\r\n                <div className=\"col\">\r\n                    <h5>Step 08 - Let's use this logger module we build in cmd module</h5>\r\n                    <Editor\r\n                        value={main}                        \r\n                        onValueChange={code => setMain(code)}\r\n                        highlight={code => highlight(code, languages.js)}\r\n                        padding={10}\r\n                        style={{\r\n                            fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\r\n                            fontSize: 12,\r\n                        }} />\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col\">\r\n                   <h5>Step 09 - Create main module</h5>\r\n                   <Editor\r\n                        value=\"go mod init github.com/rkumar-bengaluru/go\"\r\n                           \r\n                        highlight={code => highlight(code, languages.js)}\r\n                        padding={10}\r\n                        style={{\r\n                            fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\r\n                            fontSize: 12,\r\n                        }} />\r\n                    <p>followed by install package dependencies</p>\r\n                    <Editor\r\n                        value=\"go mod tidy\"\r\n                           \r\n                        highlight={code => highlight(code, languages.js)}\r\n                        padding={10}\r\n                        style={{\r\n                            fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\r\n                            fontSize: 12,\r\n                        }} />\r\n                </div>\r\n                <div className=\"col\">\r\n                    <h5>Step 10 - Use local workspace and Run the main module</h5>\r\n                    <p>In the project root directory, run the following commands</p>\r\n                    <Editor\r\n                        value=\"\r\n                        go work use ./cmd\r\n                        go work use ./logger\r\n                        go run github.com/rkumar-bengaluru/go\r\n                        \"                     \r\n                          \r\n                        highlight={code => highlight(code, languages.js)}\r\n                        padding={10}\r\n                        style={{\r\n                            fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\r\n                            fontSize: 12,\r\n                        }} />\r\n                </div>\r\n                \r\n            </div>\r\n            <p>\r\n                You can find the complete source code \r\n                 <a href='https://github.com/rkumar-bengaluru/go' target=\"_blank\"  rel=\"noreferrer\"> here</a>\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GoLogger;","import React from 'react';\r\nimport Editor from 'react-simple-code-editor';\r\nimport { highlight, languages } from 'prismjs/components/prism-core';\r\nimport 'prismjs/components/prism-clike';\r\nimport 'prismjs/components/prism-javascript';\r\nimport 'prismjs/themes/prism.css';\r\n\r\nconst RestCmd = () => {\r\n    const [app, setApp] = React.useState(\r\n        `#main.go\r\npackage main\r\n\r\nimport (\r\n    \"github.com/rkumar-bengaluru/go/rest/routes\"\r\n)\r\n        \r\nfunc main() {\r\n    var a = routes.App{}\r\n    a.Initialize(\r\n        \"postgres\",\r\n        \"postgrespw\",\r\n        \"sampledb\",\r\n    )\r\n    a.Run(\":8080\")\r\n}`);\r\n    return (\r\n        <div className='container'>\r\n            <h3>Running the Rest API's</h3>\r\n            <div className='row'>\r\n                <div className='col'>\r\n                    <p>\r\n                        In Go for running any module you would need a main package with \r\n                        main() function. For simplicity we will refer Cmd package as main\r\n                        which the go runtime will use to start the application.\r\n                    </p>\r\n                </div>\r\n            </div>\r\n            <div className='row'>\r\n                <div className=\"col-6 border\">\r\n                Step 01 - Write the main program\r\n                    <Editor\r\n                            value={app}\r\n                            highlight={app => highlight(app, languages.js)}\r\n                            padding={10}\r\n                            style={{\r\n                                fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\r\n                                fontSize: 12,\r\n                            }} />\r\n                </div>\r\n                <div className=\"col-6 border\">\r\n                Step 02 - Run the below commands and run the rest server\r\n                    <Editor\r\n                            value=\"\r\n                            go mod init github.com/rkumar-bengaluru/go/rest/cmd\r\n                            go mod tidy\r\n                            go run github.com/rkumar-bengaluru/go/rest/cmd\r\n                            \"\r\n                            highlight={app => highlight(app, languages.js)}\r\n                            padding={10}\r\n                            style={{\r\n                                fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\r\n                                fontSize: 12,\r\n                            }} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RestCmd;","import React from 'react';\r\nimport Editor from 'react-simple-code-editor';\r\nimport { highlight, languages } from 'prismjs/components/prism-core';\r\nimport 'prismjs/components/prism-clike';\r\nimport 'prismjs/components/prism-javascript';\r\nimport 'prismjs/themes/prism.css';\r\n\r\nconst RestModel = () => {\r\n    const [model, setModel] = React.useState(\r\n        `#model.js\r\ntype Product struct {\r\n    ID    int \\u0060json:\"id,omitempty\\u0060    \r\n    Name  string  \\u0060json:\"name\"\\u0060\r\n    Price float64 \\u0060json:\"price\"\\u0060\r\n}`);\r\nconst [func, setFunc] = React.useState(\r\n    `#model.js\r\nfunc (p *Product) GetProduct(db *sql.DB) error {\r\n    log.Info(fmt.Sprintf(\"product to fetch %v\\n\", p.ID))\r\n    return db.QueryRow(\"SELECT name,price from products where id=$1\", p.ID).Scan(&p.Name, &p.Price)\r\n}`);\r\nconst [depencies, setDepencies] = React.useState(\r\n    `#model.js\r\nimport (\r\n    \"database/sql\"\r\n    \"fmt\"\r\n    \"github.com/rkumar-bengaluru/go/logger\"\r\n)`);\r\nconst [all, setAll] = React.useState(\r\n    `#model.js\\nvar allproducts = map[int]Product{\r\n        1: Product{1, \"apple\", 8.99},\r\n        2: Product{2, \"mango\", 7.99},\r\n        3: Product{3, \"banana\", 4.33},\r\n}`);\r\nconst [inmem, setInMem] = React.useState(\r\n    `#model.js\\nfunc (p *Product) GetProductInMemory() error {\r\n    for key, val := range allproducts {\r\n        if key == p.ID {\r\n             p.Name = val.Name\r\n            p.Price = val.Price\r\n            break\r\n        }\r\n    }\r\n    return errors.New(\"product not found...\")\r\n}`);\r\n    return (\r\n        <div className=\"container\">\r\n            <h3>Model Of the Rest API</h3>\r\n            <div className='row '>\r\n                <div className='col'>\r\n                    <p>\r\n                        Let's say we are building a product catalog API to create,\r\n                        update, delete and read products. For the sake of simplicity\r\n                        we will discuss only of the API's. To check all of them please\r\n                        look at the code repository link \r\n                        <a target=\"_blank\" href='https://github.com/rkumar-bengaluru/go/tree/main/rest/model'> here.</a>\r\n                    </p>\r\n                </div>\r\n                <div className='col border'>\r\n                        Step01 - Define the model\r\n                        <Editor\r\n                            value={model}\r\n                            onValueChange={model => setModel(model)}\r\n                            highlight={code => highlight(code, languages.js)}\r\n                            padding={10}\r\n                            style={{\r\n                                fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\r\n                                fontSize: 12,\r\n                            }} />\r\n                </div>\r\n            </div>\r\n            <div className='row '>\r\n                <div className='col border'>\r\n                        Step02 - Define the function on the model\r\n                        <Editor\r\n                            value={func}\r\n                            onValueChange={func => setFunc(func)}\r\n                            highlight={code => highlight(code, languages.js)}\r\n                            padding={10}\r\n                            style={{\r\n                                fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\r\n                                fontSize: 12,\r\n                            }} />\r\n                   \r\n                </div>\r\n                <div className='col border'>\r\n                Step03 - import necessary dependencies\r\n                        <Editor\r\n                            value={depencies}\r\n                            onValueChange={depencies => setDepencies(depencies)}\r\n                            highlight={code => highlight(code, languages.js)}\r\n                            padding={10}\r\n                            style={{\r\n                                fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\r\n                                fontSize: 12,\r\n                            }} />\r\n                </div>\r\n            </div>\r\n            <p>\r\n                You can choose to \r\n                to implement a in memory model as well instead of db.\r\n            </p>\r\n            <div className='row '>\r\n                <div className='col border'>\r\n                        Step 02.01 - Define in memory map of products.\r\n                        <Editor\r\n                            value={all}\r\n                            onValueChange={all => setAll(all)}\r\n                            highlight={code => highlight(code, languages.js)}\r\n                            padding={10}\r\n                            style={{\r\n                                fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\r\n                                fontSize: 12,\r\n                            }} />\r\n                   \r\n                </div>\r\n                <div className='col border'>\r\n                Step 02.02 - Define function with InMemory data\r\n                        <Editor\r\n                            value={inmem}\r\n                            onValueChange={inmem => setInMem(inmem)}\r\n                            highlight={inmem => highlight(inmem, languages.js)}\r\n                            padding={10}\r\n                            style={{\r\n                                fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\r\n                                fontSize: 12,\r\n                            }} />\r\n                </div>\r\n            </div>\r\n            <p>\r\n                Run the necessary commands to build the model module. \r\n            </p>\r\n            <div className='row border'>\r\n                        <Editor\r\n                            value=\"\r\n                            go mod init github.com/rkumar-bengaluru/go/rest/model\r\n                            go mod tidy\r\n                            \"\r\n                            onValueChange={depencies => setDepencies(depencies)}\r\n                            highlight={code => highlight(code, languages.js)}\r\n                            padding={10}\r\n                            style={{\r\n                                fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\r\n                                fontSize: 12,\r\n                            }} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RestModel","import React from 'react';\r\nimport Editor from 'react-simple-code-editor';\r\nimport { highlight, languages } from 'prismjs/components/prism-core';\r\nimport 'prismjs/components/prism-clike';\r\nimport 'prismjs/components/prism-javascript';\r\nimport 'prismjs/themes/prism.css';\r\n\r\nconst RestRoutes = () => {\r\n    const [dep, setDep] = React.useState(\r\n        `#app.go\r\nimport (\r\n    \"database/sql\"\r\n    \"encoding/json\"\r\n    \"fmt\"\r\n    \"net/http\" // core go http package\r\n    \"strconv\"\r\n    \"github.com/gorilla/mux\" // gorilla package\r\n    _ \"github.com/lib/pq\" // postgres driver\r\n    \"github.com/rkumar-bengaluru/go/logger\" // from previous article\r\n    \"github.com/rkumar-bengaluru/go/rest/model\" // model we just defined\r\n)`);\r\n    const [app, setApp] = React.useState(\r\n        `#app.go\r\ntype App struct {\r\n    Router *mux.Router // gorilla router - github.com/gorilla/mux\r\n    DB     *sql.DB\r\n}\\n\r\nfunc (a *App) initRoutes() {\r\n    a.Router.HandleFunc(\"/product/{id:[0-9]+}\", a.getProduct).Methods(\"GET\")\r\n}`);\r\nconst [over, setOver] = React.useState(\r\n    `#app.go\r\nfunc (a *App) getProduct(w http.ResponseWriter, r *http.Request) {\r\n    vars := mux.Vars(r)\r\n    id, err := strconv.Atoi(vars[\"id\"])\r\n    alog.Info(fmt.Sprintf(\"getProduct::product to fetch \", id))\r\n    if err != nil {\r\n        respondWithError(w, http.StatusBadRequest, \"Invalid Product id\")\r\n        return\r\n    }\r\n    p := model.Product{ID: id}\r\n    // GetProduct is what we defined in model aove.\r\n    if err = p.GetProduct(a.DB); err != nil {\r\n        fmt.Println(err)\r\n        switch err {\r\n            case sql.ErrNoRows:\r\n                respondWithError(w, http.StatusNotFound, \"Product not found\")\r\n                return\r\n            default:\r\n                respondWithError(w, http.StatusInternalServerError, err.Error())\r\n                return\r\n        }\r\n    }\r\n    respondWithJson(w, http.StatusOK, p)\r\n}`);\r\nconst [rerr, setRErr] = React.useState(\r\n    `#app.go\r\nfunc respondWithError(w http.ResponseWriter, code int, message string) {\r\n    respondWithJson(w, code, map[string]string{\"error\": message})\r\n}\\n\r\nfunc respondWithJson(w http.ResponseWriter, code int, payload interface{}) {\r\n    response, _ := json.Marshal(payload)\r\n    alog.Info(fmt.Sprintf(\"returing ->\", string(response)))\r\n    w.Header().Set(\"Content-Type\", \"application/json\")\r\n    w.WriteHeader(code)\r\n    w.Write(response)\r\n}`);\r\nconst [cmd, setCmd] = React.useState(\r\n`#app.go\r\n// initiazlize the App\r\nfunc (a *App) Initialize(user, pwd, dbname string) {\r\n\tconnectionString := fmt.Sprintf(\"port=49154 user=%v password=%v dbname=%v sslmode=disable\",\r\n\t\tuser, pwd, dbname)\r\n\talog.Info(connectionString)\r\n\tvar err error\r\n\ta.DB, err = sql.Open(\"postgres\", connectionString)\r\n\tif err != nil {\r\n\t\tfmt.Println(err)\r\n\t}\r\n\r\n\talog.Info(fmt.Sprintf(\"DB Initialized %v\", a.DB))\r\n\ta.Router = mux.NewRouter()\r\n\talog.Info(fmt.Sprintf(\"Router %v\\n\", a.Router))\r\n\ta.initRoutes()\r\n}`);\r\n\r\nconst [run, setRun] = React.useState(\r\n    `#app.go\r\nfunc (app App) Run(add string) {\r\n    http.ListenAndServe(add, app.Router)\r\n}`);\r\n\r\n\r\n    return (\r\n        <div className='container'>\r\n            <h3>Configure Routes Of the Rest API's</h3>\r\n            <div className='row'>\r\n                    <p>\r\n                        Routes are nothing but endpoint URL's which needs to be configured\r\n                        using the Go http module. We will discuss just of the API's being\r\n                        configured. For the complete API list please refer to the code \r\n                        repository <a target=\"_blank\" href='https://github.com/rkumar-bengaluru/go/tree/main/rest/routes'>here.</a>\r\n                    </p>\r\n            </div>\r\n            <div className='row'>\r\n                <div className=\"col-6 border\">\r\n                Step 01 - Define the Dependencies\r\n                        <Editor\r\n                            value={dep}\r\n                            onValueChange={dep => setDep(dep)}\r\n                            highlight={dep => highlight(dep, languages.js)}\r\n                            padding={10}\r\n                            style={{\r\n                                fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\r\n                                fontSize: 12,\r\n                            }} />\r\n                </div>\r\n                <div className=\"col-6 border\">\r\n                Step 02 - Define App structure and initialize route\r\n                        <Editor\r\n                            value={app}\r\n                            onValueChange={app => setApp(app)}\r\n                            highlight={app => highlight(app, languages.js)}\r\n                            padding={10}\r\n                            style={{\r\n                                fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\r\n                                fontSize: 12,\r\n                            }} />\r\n                </div>\r\n            </div>\r\n            <div className='row'>\r\n                <div className=\"col-6 border\">\r\n                Step 03 - Overload App with getProduct function\r\n                        <Editor\r\n                            value={over}\r\n                            onValueChange={over => setOver(over)}\r\n                            highlight={over => highlight(over, languages.js)}\r\n                            padding={10}\r\n                            style={{\r\n                                fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\r\n                                fontSize: 12,\r\n                            }} />\r\n                </div>\r\n                <div className=\"col-6 border\">\r\n                Step 04 - Implement respondWithError and respondWithJson\r\n                        <Editor\r\n                            value={rerr}\r\n                            onValueChange={rerr => setRErr(rerr)}\r\n                            highlight={rerr => highlight(rerr, languages.js)}\r\n                            padding={10}\r\n                            style={{\r\n                                fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\r\n                                fontSize: 12,\r\n                            }} />\r\n                </div>\r\n            </div>\r\n            <div className='row'>\r\n                <div className=\"col-6 border\">\r\n                Step 05 - Initialize the App\r\n                        <Editor\r\n                            value={cmd}\r\n                            onValueChange={over => setCmd(cmd)}\r\n                            highlight={cmd => highlight(cmd, languages.js)}\r\n                            padding={10}\r\n                            style={{\r\n                                fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\r\n                                fontSize: 12,\r\n                            }} />\r\n                </div>\r\n                <div className=\"col-6 border\">\r\n                Step 06 - Run the App\r\n                        <Editor\r\n                            value={run}\r\n                            onValueChange={rerr => setRun(run)}\r\n                            highlight={run => highlight(run, languages.js)}\r\n                            padding={10}\r\n                            style={{\r\n                                fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\r\n                                fontSize: 12,\r\n                            }} />\r\n                </div>\r\n            </div>\r\n            <p>\r\n                Run the necessary commands to build the model module. \r\n            </p>\r\n            <div className='row border'>\r\n                        <Editor\r\n                            value=\"\r\n                            go mod init github.com/rkumar-bengaluru/go/rest/routes\r\n                            go mod tidy\r\n                            \"\r\n                            highlight={code => highlight(code, languages.js)}\r\n                            padding={10}\r\n                            style={{\r\n                                fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\r\n                                fontSize: 12,\r\n                            }} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RestRoutes;","import React from 'react';\r\nimport Editor from 'react-simple-code-editor';\r\nimport { highlight, languages } from 'prismjs/components/prism-core';\r\nimport 'prismjs/components/prism-clike';\r\nimport 'prismjs/components/prism-javascript';\r\nimport 'prismjs/themes/prism.css';\r\n\r\nconst RestTest = () => {\r\n    const [dep, setDep] = React.useState(\r\n        `#routes_test.go\r\nimport (\r\n    \"github.com/rkumar-bengaluru/go/rest/routes\"\r\n    \"log\"\r\n    \"net/http\"\r\n    \"net/http/httptest\"\r\n    \"os\"\r\n    \"testing\"\r\n)`);\r\n    const [app, setApp] = React.useState(\r\n        `#routes_test.go\r\nvar app = routes.App{}\\n\r\nfunc TestGetProduct(t *testing.T) {\r\n    clearTable()\r\n    req, _ := http.NewRequest(\"GET\", \"/product/1\", nil)\r\n    rec := httptest.NewRecorder()\r\n    app.Router.ServeHTTP(rec, req)\r\n    if rec.Code != http.StatusOK {\r\n        t.Errorf(\"expected %v, recvd %v\", http.StatusOK, rec.Code)\r\n    }\r\n}`);\r\n\r\nconst [m, setM] = React.useState(\r\n    `#routes_test.go\r\nfunc TestMain(m *testing.M) {\r\n    app.Initialize(\r\n        \"postgres\",\r\n        \"postgrespw\",\r\n        \"sampledb\",\r\n    )\r\n    ensureTableExist()\r\n    code := m.Run()\r\n    clearTable()\r\n    os.Exit(code)\r\n}`);\r\n    return (\r\n        <div className='container'>\r\n            <h3>Go Unit Testing</h3>\r\n            <div className='row'>\r\n                \r\n                    So far we have developed one of the rest api's. Here we will see how to \r\n                    use the inbuild testing capabilities in Go to test the rest API.\r\n                \r\n            </div>\r\n            <div className='row'>\r\n                <div className=\"col-6 border\">\r\n                Step 01 - Define the Dependencies\r\n                        <Editor\r\n                            value={dep}\r\n                            onValueChange={dep => setDep(dep)}\r\n                            highlight={dep => highlight(dep, languages.js)}\r\n                            padding={10}\r\n                            style={{\r\n                                fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\r\n                                fontSize: 12,\r\n                            }} />\r\n                </div>\r\n                <div className=\"col-6 border\">\r\n                Step 02 - Write the Main test. It is like setup and teardown for each test.\r\n                        <Editor\r\n                            value={m}\r\n                            onValueChange={m => setM(m)}\r\n                            highlight={m => highlight(m, languages.js)}\r\n                            padding={10}\r\n                            style={{\r\n                                fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\r\n                                fontSize: 12,\r\n                            }} />\r\n                </div>\r\n                \r\n            </div>\r\n            <div className='row'>\r\n                <div className=\"col-6 border\">\r\n                Step 03 - Write the test for GetProduct\r\n                        <Editor\r\n                            value={app}\r\n                            onValueChange={app => setApp(app)}\r\n                            highlight={app => highlight(app, languages.js)}\r\n                            padding={10}\r\n                            style={{\r\n                                fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\r\n                                fontSize: 12,\r\n                            }} />\r\n                </div>\r\n                <div className=\"col-6 border\">\r\n                Step 04 - Run the routes test.\r\n                        <Editor\r\n                            value=\"go test -v github.com/rkumar-bengaluru/go/rest/routes\"\r\n                            onValueChange={app => setApp(app)}\r\n                            highlight={app => highlight(app, languages.js)}\r\n                            padding={10}\r\n                            style={{\r\n                                fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\r\n                                fontSize: 12,\r\n                            }} />\r\n                </div>\r\n                \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default RestTest;","import RestCmd from \"./cmd\"\r\nimport RestModel from \"./model\"\r\nimport RestRoutes from \"./routes\"\r\nimport RestTest from \"./test\"\r\n\r\nconst RestInGo = () => {\r\n    return (\r\n        <div className='container'>\r\n            <h2>Build Rest API with Gorilla</h2>\r\n            <RestModel/>\r\n            <RestRoutes/>\r\n            <RestCmd/>\r\n            <RestTest/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RestInGo;","\r\nimport React from 'react';\r\nimport Editor from 'react-simple-code-editor';\r\nimport { highlight, languages } from 'prismjs/components/prism-core';\r\nimport 'prismjs/components/prism-clike';\r\nimport 'prismjs/components/prism-javascript';\r\nimport 'prismjs/themes/prism.css';\r\n\r\nconst Main = () => {\r\n    const [model, setModel] = React.useState(\r\n        `#main.go\r\npackage main\r\nimport (\r\n    \"github.com/rkumar-bengaluru/go/restgin/routes\"\r\n)\r\nfunc main() {\r\n    app := routes.App{}\r\n    app.Intialize()\r\n    app.router.Run(\"localhost:8080\")\r\n}\r\n\r\n// run the following command\r\n// #go mod init github.com/rkumar-bengaluru/go/restgin/main\r\n// #go run github.com/rkumar-bengaluru/go/restgin/main\r\n` );\r\n\r\nconst [modelt, setModelt] = React.useState(\r\n    `#routes_test.go\r\npackage routes_test\r\nimport (\r\n    \"github.com/rkumar-bengaluru/go/restgin/routes\"\r\n    \"testing\"\r\n    \"net/http\"\r\n    \"net/http/httptest\"\r\n)\r\n\r\nfunc TestGetProduct(t *testing.T) {\r\n   app := routes.App{}\r\n   app.Initialize()\r\n   req,_ := http.NewRequest(\"/product/1\", \"GET\", nil)\r\n   rec := httptest.NewRecorder()\r\n   app.router.ServeHTTP(rec,req)\r\n   if rec.Code != http.StatusOK {\r\n       t.Errorf(\"was expecting 200 but got %v\",rec.Code)\r\n   }\r\n}\r\n// run the following command to test.\r\n// #go test .\r\n    `\r\n);\r\n    return (\r\n        <div className=\"container\">\r\n            <h4>Main Definition.</h4>\r\n            <div className=\"row\">\r\n                <div className='col border'>\r\n                    Step 05 - Write the main function\r\n                    <Editor\r\n                                value={model}\r\n                                onValueChange={model => setModel(model)}\r\n                                highlight={model => highlight(model, languages.js)}\r\n                                padding={10}\r\n                                style={{\r\n                                    fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\r\n                                    fontSize: 12,\r\n                                }} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Main;","\r\nimport React from 'react';\r\nimport Editor from 'react-simple-code-editor';\r\nimport { highlight, languages } from 'prismjs/components/prism-core';\r\nimport 'prismjs/components/prism-clike';\r\nimport 'prismjs/components/prism-javascript';\r\nimport 'prismjs/themes/prism.css';\r\n\r\nconst Model = () => {\r\n    const [model, setModel] = React.useState(\r\n        `#model.go\r\npackage model\r\nimport \"errors\"\r\ntype Product struct {\r\n    ID int \\u0060json:\"id\"\\u0060\r\n    Name string \\u0060json:\"name\"\\u0060\r\n    Price float64 \\u0060json:\"price\"\\u0060\r\n}\r\n// In mem list of products\r\nvar all := map[int]Product {\r\n    1 : Product{1, \"apple\", 8.88},\r\n    2 : Product{2, \"banana:, 4.44}\r\n}\r\n// method to fetch product\r\nfunc (p *Product) GetProduct() error {\r\n    for key,val := range all {\r\n        if key == p.ID {\r\n            p.Name = val.Name\r\n            p.Price = val.Price\r\n            return nil\r\n        }\r\n    }\r\n    return errors.New(\"could not find product\")\r\n}\r\n// run the following command\r\n// #go mod init github.com/rkumar-bengaluru/go/restgin/model\r\n// #go mod tidy\r\n` );\r\n\r\nconst [modelt, setModelt] = React.useState(\r\n    `#model_test.go\r\npackage model_test\r\nimport (\r\n    \"github.com/rkumar-bengaluru/go/restgin/model\"\r\n    \"testing\"\r\n)\r\n\r\nfunc TestGetProduct(t *testing.T) {\r\n    p := model.Product(ID : 1)\r\n    p.GetProduct()\r\n    if p.Name != \"apple\"{\r\n        t.Errorf(\"was expecting name as apple however got %v, \", p.Name)\r\n    }\r\n    if p.Price != 8.88 {\r\n        t.Errorf(\"was expecting price as 8.88 but got %v\",p.Price)\r\n    }\r\n}\r\n// run the following command to test.\r\n// #go test .\r\n    `\r\n);\r\n    return (\r\n        <div className=\"container\">\r\n            <h4>Model Definition.</h4>\r\n            <div className=\"row\">\r\n                <div className='col border'>\r\n                    Step 01 - Define the model\r\n                    <Editor\r\n                                value={model}\r\n                                onValueChange={model => setModel(model)}\r\n                                highlight={model => highlight(model, languages.js)}\r\n                                padding={10}\r\n                                style={{\r\n                                    fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\r\n                                    fontSize: 12,\r\n                                }} />\r\n                </div>\r\n                <div className='col border'>\r\n                    Step 02 - Write Unit Test for model\r\n                    <Editor\r\n                                value={modelt}\r\n                                onValueChange={modelt => setModelt(modelt)}\r\n                                highlight={modelt => highlight(modelt, languages.js)}\r\n                                padding={10}\r\n                                style={{\r\n                                    fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\r\n                                    fontSize: 12,\r\n                                }} />\r\n                </div>  \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Model;","\r\nimport React from 'react';\r\nimport Editor from 'react-simple-code-editor';\r\nimport { highlight, languages } from 'prismjs/components/prism-core';\r\nimport 'prismjs/components/prism-clike';\r\nimport 'prismjs/components/prism-javascript';\r\nimport 'prismjs/themes/prism.css';\r\n\r\nconst Routes = () => {\r\n    const [model, setModel] = React.useState(\r\n        `#routes.go\r\npackage routes\r\nimport (\r\n    \"github.com/gin-gonic/gin\"\r\n    \"github.com/rkumar-bengaluru/go/restgin/model\"\r\n    \"strconv\"\r\n    \"http\"\r\n)\r\ntype App struct {\r\n    router *gin.Engine\r\n}\r\n// let's write the route\r\nfunc getProduct(c *gin.Context) {\r\n    id := c.Param(\"id\")\r\n    idint := strconv.Atoi(id)\r\n    p := model.Product{ID : idint}\r\n    p.GetProduct()\r\n    if p.Name == \"\" {\r\n        c.IndentedJSON(http.StatusNotFound, gin.H(\"{ \"msg\" : \"could not found product\"}\"))\r\n        return\r\n    }\r\n    c.IndentedJSON(http.StatusOK, p)\r\n}\r\n// initialize the app with routes.\r\nfunc (app *App) Initialize() {\r\n    app.router = gin.Default()\r\n    app.router.GET(\"/product/:id\", getProduct)\r\n}\r\n// run the following command\r\n// #go mod init github.com/rkumar-bengaluru/go/restgin/routes\r\n// #go mod tidy\r\n` );\r\n\r\nconst [modelt, setModelt] = React.useState(\r\n    `#routes_test.go\r\npackage routes_test\r\nimport (\r\n    \"github.com/rkumar-bengaluru/go/restgin/routes\"\r\n    \"testing\"\r\n    \"net/http\"\r\n    \"net/http/httptest\"\r\n)\r\n\r\nfunc TestGetProduct(t *testing.T) {\r\n   app := routes.App{}\r\n   app.Initialize()\r\n   req,_ := http.NewRequest(\"/product/1\", \"GET\", nil)\r\n   rec := httptest.NewRecorder()\r\n   app.router.ServeHTTP(rec,req)\r\n   if rec.Code != http.StatusOK {\r\n       t.Errorf(\"was expecting 200 but got %v\",rec.Code)\r\n   }\r\n}\r\n// run the following command to test.\r\n// #go test .\r\n    `\r\n);\r\n    return (\r\n        <div className=\"container\">\r\n            <h4>Routes Definition.</h4>\r\n            <div className=\"row\">\r\n                <div className='col border'>\r\n                    Step 03 - Let's Define the Routes\r\n                    <Editor\r\n                                value={model}\r\n                                onValueChange={model => setModel(model)}\r\n                                highlight={model => highlight(model, languages.js)}\r\n                                padding={10}\r\n                                style={{\r\n                                    fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\r\n                                    fontSize: 12,\r\n                                }} />\r\n                </div>\r\n                <div className='col border'>\r\n                    Step 04 - Write Unit Test for routes\r\n                    <Editor\r\n                                value={modelt}\r\n                                onValueChange={modelt => setModelt(modelt)}\r\n                                highlight={modelt => highlight(modelt, languages.js)}\r\n                                padding={10}\r\n                                style={{\r\n                                    fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\r\n                                    fontSize: 12,\r\n                                }} />\r\n                </div>  \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Routes;","import Main from './main'\r\nimport Model from './model'\r\nimport Routes from './routes'\r\nconst RestGin = () => {\r\n    return (\r\n        <div className=\"container\">\r\n            <h3>Let's build Rest API with Gin Framework...</h3>\r\n            <p>Gin is a web framework written in Go (Golang). It features a martini-like API with performance that is up to 40 times faster thanks to httprouter. If you need performance and good productivity, you will love Gin</p>\r\n            <p>Link to gin framework <a href=\"https://github.com/gin-gonic/gin\"> here</a></p>\r\n            <Model/>\r\n            <Routes/>\r\n            <Main/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RestGin","import React from 'react';\r\nimport Editor from 'react-simple-code-editor';\r\nimport { highlight, languages } from 'prismjs/components/prism-core';\r\nimport 'prismjs/components/prism-clike';\r\nimport 'prismjs/components/prism-javascript';\r\nimport 'prismjs/themes/prism.css';\r\n\r\nconst ParallelSearch = () => {\r\n    const [model, setModel] = React.useState(\r\n        `#main.go\r\n// parallel search with go routine\r\nfunc SearchEngine(query string) (results []string) {\r\n    resultChannel := make(chan string)\r\n    go func() { resultChannel <- Web(query) }()\r\n    go func() { resultChannel <- Image(query) }()\r\n    go func() { resultChannel <- Video(query) }()\r\n    // waiting for the slowest service...\r\n    for i := 0; i < 3; i++ {\r\n        results = append(results, <-resultChannel)\r\n    }\r\n    return\r\n}\r\n` );\r\nconst [service, setService] = React.useState(\r\n    `#main.go\r\n    func SearchEngine(query string) (results []string) {\r\n        results = append(results, Web(query))\r\n        results = append(results, Image(query))\r\n        results = append(results, Video(query))\r\n        return\r\n    }\r\n    func SearchMain(query string) {\r\n        start := time.Now()\r\n        results := SearchEngine(\"golang\")\r\n        elapsed := time.Since(start)\r\n        fmt.Println(results)\r\n        fmt.Println(elapsed)\r\n    }\r\n    func main() {\r\n        SearchMain(\"Golang\")\r\n    }\r\n` );\r\n    return (\r\n        <div classNamae=\"container\">\r\n            <h4>Implementation Of Parallel Search</h4>\r\n            <div className=\"row\">\r\n                <div className='col border'>\r\n                    Step 01 - Use Go With Channel for fakeSearch\r\n                    <Editor\r\n                                value={model}\r\n                                onValueChange={model => setModel(model)}\r\n                                highlight={model => highlight(model, languages.js)}\r\n                                padding={10}\r\n                                style={{\r\n                                    fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\r\n                                    fontSize: 12,\r\n                                }} />\r\n                </div>\r\n              \r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default ParallelSearch","import React from 'react';\r\nimport Editor from 'react-simple-code-editor';\r\nimport { highlight, languages } from 'prismjs/components/prism-core';\r\nimport 'prismjs/components/prism-clike';\r\nimport 'prismjs/components/prism-javascript';\r\nimport 'prismjs/themes/prism.css';\r\n\r\nconst ParallelWithTimeout = () => {\r\n    const [model, setModel] = React.useState(\r\n        `#main.go\r\n// parallel search with timeout\r\nfunc SearchEngine(query string) (results []string) {\r\n\tresultChannel := make(chan string)\r\n\tquit := time.After(80 * time.Millisecond)\r\n\tgo func() { resultChannel <- Web(query) }()\r\n\tgo func() { resultChannel <- Image(query) }()\r\n\tgo func() { resultChannel <- Video(query) }()\r\n\tfor i := 0; i < 3; i++ {\r\n\t\tselect {\r\n\t\tcase result := <-resultChannel:\r\n\t\t\tresults = append(results, result)\r\n\t\tcase <-quit:\r\n\t\t\tfmt.Println(\"timeout on search\")\r\n\t\t\treturn\r\n\t\t}\r\n\t}\r\n\treturn\r\n}\r\n\r\n` );\r\nconst [service, setService] = React.useState(\r\n    `#main.go\r\n    func SearchEngine(query string) (results []string) {\r\n        results = append(results, Web(query))\r\n        results = append(results, Image(query))\r\n        results = append(results, Video(query))\r\n        return\r\n    }\r\n    func SearchMain(query string) {\r\n        start := time.Now()\r\n        results := SearchEngine(\"golang\")\r\n        elapsed := time.Since(start)\r\n        fmt.Println(results)\r\n        fmt.Println(elapsed)\r\n    }\r\n    func main() {\r\n        SearchMain(\"Golang\")\r\n    }\r\n` );\r\n    return (\r\n        <div classNamae=\"container\">\r\n            <h6>Implementation Of Parallel Search With Timeout</h6>\r\n            <div className=\"row\">\r\n                <div className='col border'>\r\n                    With Timout using select\r\n                    <Editor\r\n                                value={model}\r\n                                onValueChange={model => setModel(model)}\r\n                                highlight={model => highlight(model, languages.js)}\r\n                                padding={10}\r\n                                style={{\r\n                                    fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\r\n                                    fontSize: 12,\r\n                                }} />\r\n                </div>\r\n              \r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default ParallelWithTimeout","import React from 'react';\r\nimport Editor from 'react-simple-code-editor';\r\nimport { highlight, languages } from 'prismjs/components/prism-core';\r\nimport 'prismjs/components/prism-clike';\r\nimport 'prismjs/components/prism-javascript';\r\nimport 'prismjs/themes/prism.css';\r\n\r\nconst ReplicaSearch = () => {\r\n    const [model, setModel] = React.useState(\r\n        `#main.go\r\nvar (\r\n    Web          = fakeSearch(\"Web\")\r\n    WebReplica   = fakeSearch(\"Web Replica\")\r\n    Image        = fakeSearch(\"Image\")\r\n    ImageReplica = fakeSearch(\"Image Replica\")\r\n    Video        = fakeSearch(\"Video\")\r\n    VideoReplica = fakeSearch(\"Video Replica\")\r\n)\r\nfunc GetFromFirstReplica(query string, replicas ...FakeSearch) string {\r\n    c := make(chan string)\r\n    searchReplica := func(i int) { c <- replicas[i](query) }\r\n    for i := range replicas {\r\n        go searchReplica(i)\r\n    }\r\n    return <-c\r\n}\r\n\r\n` );\r\nconst [service, setService] = React.useState(\r\n    `#main.go\r\nfunc SearchEngine(query string) (results []string) {\r\n    resultChannel := make(chan string)\r\n    quit := time.After(80 * time.Millisecond)\r\n    go func() { resultChannel <- GetFromFirstReplica(query, Web, WebReplica, Web) }()\r\n    go func() { resultChannel <- GetFromFirstReplica(query, Image, ImageReplica, ImageReplica) }()\r\n    go func() { resultChannel <- GetFromFirstReplica(query, Video, VideoReplica, VideoReplica) }()\r\n    for i := 0; i < 3; i++ {\r\n        select {\r\n            case result := <-resultChannel:\r\n                results = append(results, result)\r\n            case <-quit:\r\n                fmt.Println(\"timeout on search\")\r\n                return\r\n        }\r\n    }\r\n    return\r\n}\r\n` );\r\n    return (\r\n        <div classNamae=\"container\">\r\n            <h6>Many replica Implementation</h6>\r\n            <div className=\"row\">\r\n                <div className='col border'>\r\n                    Get first from replica\r\n                    <Editor\r\n                                value={model}\r\n                                onValueChange={model => setModel(model)}\r\n                                highlight={model => highlight(model, languages.js)}\r\n                                padding={10}\r\n                                style={{\r\n                                    fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\r\n                                    fontSize: 12,\r\n                                }} />\r\n                </div>\r\n                <div className='col border'>\r\n                    Search with multiple replicas\r\n                    <Editor\r\n                                value={service}\r\n                                onValueChange={service => setService(service)}\r\n                                highlight={service => highlight(service, languages.js)}\r\n                                padding={10}\r\n                                style={{\r\n                                    fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\r\n                                    fontSize: 12,\r\n                                }} />\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default ReplicaSearch","import React from 'react';\r\nimport Editor from 'react-simple-code-editor';\r\nimport { highlight, languages } from 'prismjs/components/prism-core';\r\nimport 'prismjs/components/prism-clike';\r\nimport 'prismjs/components/prism-javascript';\r\nimport 'prismjs/themes/prism.css';\r\n\r\nconst SerialSearch = () => {\r\n    const [model, setModel] = React.useState(\r\n        `#main.go\r\n// fake search implementation\r\nvar (\r\n\tWeb   = fakeSearch(\"Web\")\r\n\tImage = fakeSearch(\"Image\")\r\n\tVideo = fakeSearch(\"Video\")\r\n)\r\ntype FakeSearch func(query string) string\r\nfunc fakeSearch(kind string) FakeSearch {\r\n\treturn func(query string) string {\r\n\t\ttime.Sleep(time.Duration(rand.Intn(100)) * time.Millisecond)\r\n\t\treturn fmt.Sprintf(\"%v result for %q\\n\", kind, query)\r\n\t}\r\n}\r\n` );\r\nconst [service, setService] = React.useState(\r\n    `#main.go\r\n    func SearchEngine(query string) (results []string) {\r\n        results = append(results, Web(query))\r\n        results = append(results, Image(query))\r\n        results = append(results, Video(query))\r\n        return\r\n    }\r\n    func SearchMain(query string) {\r\n        start := time.Now()\r\n        results := SearchEngine(\"golang\")\r\n        elapsed := time.Since(start)\r\n        fmt.Println(results)\r\n        fmt.Println(elapsed)\r\n    }\r\n    func main() {\r\n        SearchMain(\"Golang\")\r\n    }\r\n` );\r\n    return (\r\n        <div classNamae=\"container\">\r\n            <h4>Implementation Of Serial Search</h4>\r\n            <div className=\"row\">\r\n                <div className='col border'>\r\n                    Step 01 - Fake Search Implementation\r\n                    <Editor\r\n                                value={model}\r\n                                onValueChange={model => setModel(model)}\r\n                                highlight={model => highlight(model, languages.js)}\r\n                                padding={10}\r\n                                style={{\r\n                                    fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\r\n                                    fontSize: 12,\r\n                                }} />\r\n                </div>\r\n                <div className='col border'>\r\n                    Step 02 - Serial Search for all Service\r\n                    <Editor\r\n                                value={service}\r\n                                onValueChange={service => setService(service)}\r\n                                highlight={service => highlight(service, languages.js)}\r\n                                padding={10}\r\n                                style={{\r\n                                    fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\r\n                                    fontSize: 12,\r\n                                }} />\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default SerialSearch","import React from \"react\"\r\nimport ParallelSearch from \"./parallel\"\r\nimport ParallelWithTimeout from \"./parallelwithtimeout\"\r\nimport ReplicaSearch from \"./replicas\"\r\nimport SerialSearch from \"./serial\"\r\n\r\nconst Home = (props) => {\r\n    const [colSer, setColSer] = React.useState(false)\r\n    const [colPar, seColPar] = React.useState(false)\r\n    const [colTim, seColTim] = React.useState(false)\r\n    const [colRep, seColRep] = React.useState(false)\r\n\r\n    return ( <div classNamae=\"row\">\r\n    <h3>SearchEngine</h3>\r\n    <p>\r\n        In this project we will write a search engine using go. This will be a mock\r\n        search implementation. There are 4 variation of the implementation, we start\r\n        with basic serial search, then parallel search, parallel with timeout and \r\n        finally with multiple replicas of services. Each phase is performance \r\n        improvement over the previous one.\r\n    </p>\r\n    <p>Code repository <a href=\"https://github.com/rkumar-bengaluru/go/tree/main/searchengine\" target=\"_blank\">here</a></p>\r\n    <div>\r\n        <h6>Serial Search</h6>\r\n        <p>\r\n            With this approach we will call 3 services (web, image , video) search\r\n            one by one and then combine the results and send to caller.\r\n        </p>\r\n        {!colSer && \r\n            <a \r\n                className='footer-h3' \r\n                href=\"javascript:void(0)\"\r\n                onClick={() => setColSer(true)}>\r\n                Show Code...\r\n            </a>\r\n        }\r\n        {colSer && \r\n            <>\r\n            <a \r\n                className='footer-h3' \r\n                href=\"javascript:void(0)\"\r\n                onClick={() => setColSer(false)}>\r\n                Hide Code...\r\n            </a>\r\n                <SerialSearch/>\r\n               \r\n            </>\r\n           \r\n        }\r\n        <p></p>\r\n    </div>\r\n    <div>\r\n        <h6>Parallel Search</h6>\r\n        <p>\r\n        In the next section we will enable parallel search using go routines\r\n        then combine the results. This will drastically improve the search time.\r\n        </p>\r\n        {!colPar && \r\n            <a \r\n                className='footer-h3' \r\n                href=\"javascript:void(0)\"\r\n                onClick={() => seColPar(true)}>\r\n                Show Code...\r\n            </a>\r\n        }\r\n        {colPar && \r\n            <>\r\n            <a \r\n                className='footer-h3' \r\n                href=\"javascript:void(0)\"\r\n                onClick={() => seColPar(false)}>\r\n                Hide Code...\r\n            </a>\r\n                <ParallelSearch/>\r\n            </>\r\n           \r\n        }\r\n        <p></p>\r\n    </div>\r\n    <div>\r\n        <h6>Parallel Search With Timeout</h6>\r\n        <p>\r\n        In the case we have the SLA that users should not wait for more than 80\r\n        milliseconds and hence we will timeout if any of the service(web, image, video)\r\n        takes more than 80 milliseconds and return what we got.\r\n        </p>\r\n        {!colTim && \r\n            <a \r\n                className='footer-h3' \r\n                href=\"javascript:void(0)\"\r\n                onClick={() => seColTim(true)}>\r\n                Show Code...\r\n            </a>\r\n        }\r\n        {colTim && \r\n            <>\r\n            <a \r\n                className='footer-h3' \r\n                href=\"javascript:void(0)\"\r\n                onClick={() => seColTim(false)}>\r\n                Hide Code...\r\n            </a>\r\n                <ParallelWithTimeout/>\r\n            </>\r\n           \r\n        }\r\n        <p></p>\r\n    </div>\r\n    <div>\r\n        <h6>Replica Search</h6>\r\n        <p>\r\n       In this case we will create multiple replicas of each service and in parallel\r\n       call each one of them. This will ensure at least of the service replica will \r\n       respond within 80 milliseconds. With this implementation there is going to be\r\n       100% chance of users gettig all service response within the SLA.\r\n        </p>\r\n        {!colRep && \r\n            <a \r\n                className='footer-h3' \r\n                href=\"javascript:void(0)\"\r\n                onClick={() => seColRep(true)}>\r\n                Show Code...\r\n            </a>\r\n        }\r\n        {colRep && \r\n            <>\r\n            <a \r\n                className='footer-h3' \r\n                href=\"javascript:void(0)\"\r\n                onClick={() => seColRep(false)}>\r\n                Hide Code...\r\n            </a>\r\n                <ReplicaSearch/>\r\n            </>\r\n           \r\n        }\r\n    </div>\r\n</div>)\r\n}\r\nexport default Home","import React, {useReducer} from 'react';\r\nimport ParallelSearch from \"./parallel\"\r\nimport ParallelSearchWithTimeOut from \"./parallelwithtimeout\"\r\nimport ReplicaSearch from \"./replicas\"\r\nimport SerialSearch from \"./serial\"\r\nimport Home from \"./home\"\r\nconst SearchEngine = () => {\r\n    \r\n\r\n    function reducer(state, action) {\r\n        switch (action.type) {\r\n            case '0':\r\n                return { prev: state.current, current: <SerialSearch/> };\r\n            case '1':\r\n                return { prev: state.current, current: <ParallelSearch/> };\r\n            case '2':\r\n                return { prev: state.current, current: <ParallelSearchWithTimeOut/> };\r\n            case '3':\r\n                return { prev: state.current, current: <ReplicaSearch/> };\r\n            default:\r\n                return { prev: state.current, current: Home };\r\n        }\r\n    }\r\n\r\n    const initial = { current: <Home />, prev: '' };\r\n    const [state, dispatch] = useReducer(reducer, initial);\r\n    \r\n    \r\n\r\n    return (\r\n        <div class=\"container\">\r\n            {state.current}\r\n        </div>\r\n    )\r\n}\r\nexport default SearchEngine","import React from 'react';\r\nimport Editor from 'react-simple-code-editor';\r\nimport { highlight, languages } from 'prismjs/components/prism-core';\r\nimport 'prismjs/components/prism-clike';\r\nimport 'prismjs/components/prism-javascript';\r\nimport 'prismjs/themes/prism.css';\r\n\r\nconst Palindrome = () => {\r\n    const [model, setModel] = React.useState(\r\n        `#palindrome.go\r\nimport (\r\n    \"strconv\"\r\n)\r\nfunc CheckIfPlaindrom(n string) bool {\r\n    toCheck := []rune(n)\r\n    m := (len(toCheck) -1)/2\r\n    for i,j := 0,len(toCheck) -1; i <= m; i,j = i+1, j -1 {\r\n        if toCheck[i] != toCheck[j] {\r\n            return false\r\n        }\r\n    }\r\n    return true\r\n}\r\n\r\nfunc CheckIfIntPalindrome(n i) bool {\r\n    str := strconv.Itoa(i)\r\n    return CheckIfPlaindrom(n)\r\n}\r\n` );\r\nconst [test, setTest] = React.useState(\r\n    `#palindrome_test.go\r\nimport (\r\n\"testing\"\r\n)\r\nfunc TestCheckIfPlaindrom(t *testing.T)  {\r\n    test := \"madam\"\r\n    want := true\r\n    got  := CheckIfPlaindrome(test)\r\n    if got != want {\r\n        t.Errorf(\"want %v got %v\\n\",want,got)\r\n    }\r\n}\r\n\r\nfunc TestCheckIfIntPalindrome(t *testing.T)  {\r\n    test := 10101\r\n    want := true\r\n    got := CheckIfIntPalindrome(test)\r\n    if got != want {\r\n        t.Errorf(\"want %v got %v\\n\",want,got)\r\n    }\r\n}\r\n` );\r\n    return (\r\n        <div classNamae=\"container\">\r\n            <h4>Palindrome String and Integer</h4>\r\n            <p>A palindrome string or integer is one which is same if you reverse the string or integer</p>\r\n            <p>Example Of String Palindrome :- madam</p>\r\n            <p>Example Of Integer Palindrome :- 10101</p>\r\n            <div className=\"row\">\r\n                <div className='col-6 border'>\r\n                    <Editor\r\n                                value={model}\r\n                                onValueChange={model => setModel(model)}\r\n                                highlight={model => highlight(model, languages.js)}\r\n                                padding={10}\r\n                                style={{\r\n                                    fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\r\n                                    fontSize: 12,\r\n                                }} />\r\n                </div>\r\n                <div className='col-6 border'>\r\n                    <Editor\r\n                                value={test}\r\n                                onValueChange={test => setModel(test)}\r\n                                highlight={test => highlight(test, languages.js)}\r\n                                padding={10}\r\n                                style={{\r\n                                    fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\r\n                                    fontSize: 12,\r\n                                }} />\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default Palindrome","import React, {useReducer} from 'react';\r\n\r\nimport GoLogger from '../logger';\r\nimport RestInGo from '../rest';\r\nimport RestGin from '../restgin';\r\nimport SearchEngine from '../search';\r\nimport Palindrome from '../algorithms/palindrome';\r\nconst App = () => {\r\n    const Home = <div class=\"container\">\r\n                    <p>\r\n                        Go By Example is set of small projects which will help beginner or\r\n                        and experienced professional programmer to try and make their hands\r\n                        dirty with real time projects. \r\n                    </p>\r\n                    <div className='row'>\r\n                        <div className='col-4'>\r\n                            <a \r\n                            className='footer-h3' \r\n                            href=\"javascript:void(0)\"\r\n                                onClick={() => dispatch({ type: '3' })}>\r\n                                Let's write a Search Engine...\r\n                            </a>\r\n                        </div>\r\n                    </div>\r\n                    <div className='row'>\r\n                        <div className='col-4'>\r\n                            <a \r\n                            className='footer-h3' \r\n                            href=\"javascript:void(0)\"\r\n                            \r\n                                onClick={() => dispatch({ type: '2' })}>\r\n                                Rest API with Gin\r\n                            </a>\r\n                        </div>\r\n                        <div className='col-4'>\r\n                            <a \r\n                            className='footer-h3' \r\n                            href=\"javascript:void(0)\"\r\n                            \r\n                                onClick={() => dispatch({ type: '0' })}>\r\n                                Custom Logger for Go\r\n                            </a>\r\n                        </div>\r\n                        <div className='col-4'>\r\n                            <a \r\n                            className='footer-h3' \r\n                            href=\"javascript:void(0)\"\r\n                            \r\n                                onClick={() => dispatch({ type: '1' })}>\r\n                                Rest API with Gorilla\r\n                            </a>\r\n                        </div>\r\n                    </div>\r\n                   { /** algorithms... */}\r\n                    <div className='row'>\r\n                        <div className='col-4'>\r\n                            <a \r\n                            className='footer-h3' \r\n                            href=\"javascript:void(0)\"\r\n                            \r\n                                onClick={() => dispatch({ type: '4' })}>\r\n                                Palindrome\r\n                            </a>\r\n                        </div>\r\n                       \r\n                    </div>\r\n                </div>\r\n\r\n    const initial = { current: Home, prev: '' };\r\n    const [state, dispatch] = useReducer(reducer, initial);\r\n\r\n    \r\n\r\n    function reducer(state, action) {\r\n        switch (action.type) {\r\n            case '0':\r\n                return { prev: state.current, current: <GoLogger/> };\r\n            case '1':\r\n                return { prev: state.current, current: <RestInGo/> };\r\n            case '2':\r\n                return { prev: state.current, current: <RestGin/> };\r\n            case '3':\r\n                return { prev: state.current, current: <SearchEngine/> };\r\n            case '4':\r\n                return { prev: state.current, current: <Palindrome/> };\r\n            default:\r\n                return { prev: state.current, current: Home };\r\n        }\r\n    }\r\n    return (\r\n        \r\n        <div class=\"container\">\r\n            {state.current}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\nimport AppLayout2 from './components/layout2';\r\nimport App from './components/app';\r\nimport GoLogger from './components/logger';\r\nimport RestInGo from './components/rest'\r\n\r\nReactDOM.render(\r\n  \r\n  <BrowserRouter>\r\n    <AppLayout2>\r\n      <Switch>\r\n        <Route exact path=\"/gobyexample/\" component={App} />\r\n        <Route exact path=\"/gobyexample/logger\" component={GoLogger} />\r\n        <Route exact path=\"/gobyexample/logger\" component={RestInGo} />\r\n      </Switch>\r\n    </AppLayout2>\r\n  </BrowserRouter>\r\n\r\n  , document.getElementById('root'));\r\nregisterServiceWorker();\r\n\r\n\r\n"],"sourceRoot":""}